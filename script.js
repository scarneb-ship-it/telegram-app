// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const APP_CONFIG = {
    version: '2.4.0',
    build: '2024.01.21'
};

// –î–∞–Ω–Ω—ã–µ –∏–≥—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const GAMES_DATA = [
    {
        id: "1",
        name: "Hamster Gamedev",
        description: "–°–æ–∑–¥–∞–π –∏–≥—Ä–æ–≤—É—é —Å—Ç—É–¥–∏—é –∏ —Å—Ç–∞–Ω—å –ª–∏–¥–µ—Ä–æ–º –∏–Ω–¥—É—Å—Ç—Ä–∏–∏",
        players: "15.2K",
        rating: "4.6",
        url: "https://t.me/hamster_gamedev_bot/start",
        image: "images/hamster-gamedev.jpg"
    },
    {
        id: "2", 
        name: "Hamster King",
        description: "–°—Ç–∞–Ω—å –∫–æ—Ä–æ–ª—ë–º –≤ —ç–ø–∏—á–µ—Å–∫–∏—Ö –±–∏—Ç–≤–∞—Ö –∑–∞ –º–æ–Ω–µ—Ç—ã",
        players: "8.7K",
        rating: "4.7",
        url: "https://t.me/hamster_king_bot/start",
        image: "images/hamster-king.jpg"
    },
    {
        id: "3",
        name: "Hamster Fight Club", 
        description: "–ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–± –¥–ª—è —Å–∞–º—ã—Ö —Å–∏–ª—å–Ω—ã—Ö —Ö–æ–º—è–∫–æ–≤",
        players: "5.3K",
        rating: "4.9",
        url: "https://t.me/hamster_fight_club_bot/start",
        image: "images/hamster-fight-club.jpg"
    },
    {
        id: "4",
        name: "Bitquest",
        description: "–ö—Ä–∏–ø—Ç–æ-–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ñ—ç–Ω—Ç–µ–∑–∏ –º–∏—Ä–µ –±–ª–æ–∫—á–µ–π–Ω–∞",
        players: "12.1K",
        rating: "4.8",
        url: "https://t.me/bitquest_bot/start",
        image: "images/bitquest.jpg"
    }
];

// –î–∞–Ω–Ω—ã–µ –±–∏—Ä–∂ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const EXCHANGES_DATA = [
    {
        id: "1",
        name: "Binance",
        description: "–ö—Ä—É–ø–Ω–µ–π—à–∞—è –º–∏—Ä–æ–≤–∞—è –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞",
        url: "https://www.binance.com",
        logo: "images/binance.png",
        features: ["Spot", "Futures", "Earn"]
    },
    {
        id: "2",
        name: "Bybit",
        description: "–õ—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
        url: "https://www.bybit.com",
        logo: "images/bybit.jpg",
        features: ["Futures", "Copy Trading", "Options"]
    },
    {
        id: "3",
        name: "OKX",
        description: "–¢—ã—Å—è—á–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä",
        url: "https://www.okx.com",
        logo: "images/okx.png",
        features: ["Spot", "DeFi", "NFT"]
    }
];

// –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–µ–π
const NEWS_DATA = [
    {
        id: "1", 
        title: "Hamster Verse –∑–∞–ø—É—â–µ–Ω!",
        content: "–ù–æ–≤–∞—è –∏–≥—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –ª—É—á—à–∏–º–∏ –∏–≥—Ä–∞–º–∏ Telegram —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö!",
        date: new Date().toISOString()
    },
    {
        id: "2",
        title: "–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∏–≥—Ä—ã",
        content: "–í –∫–∞—Ç–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã: Hamster Gamedev, Hamster King –∏ –¥—Ä—É–≥–∏–µ.",
        date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    console.log('üöÄ Hamster Verse v' + APP_CONFIG.version + ' initializing...');
    
    try {
        setupNavigation();
        setupTelegramIntegration();
        setupThemeToggle();
        setupShareButton();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        displayGames(GAMES_DATA);
        displayExchanges(EXCHANGES_DATA);
        displayNews(NEWS_DATA);
        
        document.getElementById('app-version').textContent = APP_CONFIG.version;
        document.getElementById('app-build').textContent = APP_CONFIG.build;
        
        console.log('‚úÖ Hamster Verse initialized successfully');
        
    } catch (error) {
        console.error('‚ùå App initialization failed:', error);
    }
}

// ==================== UI FUNCTIONS ====================

function displayGames(games) {
    const container = document.getElementById('games-container');
    
    if (!games || games.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üéÆ</div>
                <h3>–ò–≥—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∑–∂–µ</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = games.map(game => `
        <div class="game-card" data-game-id="${game.id}">
            <div class="game-content">
                <div class="game-image">
                    <img src="${game.image}" alt="${game.name}" onerror="handleImageError(this)">
                </div>
                <div class="game-info">
                    <h3 class="game-title">${game.name}</h3>
                    <p class="game-description">${game.description}</p>
                    <div class="game-footer">
                        <div class="game-stats">
                            <div class="game-players">
                                <span>üë• ${game.players}</span>
                            </div>
                            <div class="game-rating">
                                <span>‚≠ê ${game.rating}</span>
                            </div>
                        </div>
                        <button class="play-button" data-url="${game.url}">
                            –ò–≥—Ä–∞—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
    
    setupGameButtons();
}

function handleImageError(img) {
    console.warn('Image failed to load:', img.src);
    img.style.display = 'none';
    const parent = img.parentElement;
    parent.style.background = 'var(--accent-gradient)';
    parent.innerHTML = '<div class="image-fallback">üéÆ</div>';
}

function displayExchanges(exchanges) {
    const container = document.getElementById('exchanges-container');
    
    if (!exchanges || exchanges.length === 0) {
        container.innerHTML = '<div class="empty-state"><p>–ë–∏—Ä–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p></div>';
        return;
    }
    
    container.innerHTML = exchanges.map(exchange => `
        <a href="${exchange.url}" class="exchange-card" target="_blank" rel="noopener">
            <div class="exchange-content">
                <div class="exchange-logo">
                    <img src="${exchange.logo}" alt="${exchange.name}" onerror="handleImageError(this)">
                </div>
                <div class="exchange-info">
                    <h3 class="exchange-name">${exchange.name}</h3>
                    <p class="exchange-description">${exchange.description}</p>
                    <div class="exchange-features">
                        ${exchange.features.map(feature => `
                            <span class="exchange-feature">${feature}</span>
                        `).join('')}
                    </div>
                </div>
            </div>
        </a>
    `).join('');
}

function displayNews(news) {
    const container = document.getElementById('news-container');
    
    if (!news || news.length === 0) {
        container.innerHTML = '<div class="empty-state"><p>–ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p></div>';
        return;
    }
    
    container.innerHTML = news.map(item => `
        <div class="news-item">
            <span class="news-date">${formatDate(item.date)}</span>
            <div class="news-title">${item.title}</div>
            <div class="news-content">${item.content}</div>
        </div>
    `).join('');
}

function setupGameButtons() {
    const playButtons = document.querySelectorAll('.play-button');
    playButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.stopPropagation();
            const url = this.getAttribute('data-url');
            openGame(url);
        });
    });
    
    const gameCards = document.querySelectorAll('.game-card');
    gameCards.forEach(card => {
        card.addEventListener('click', function() {
            const playButton = this.querySelector('.play-button');
            const url = playButton.getAttribute('data-url');
            openGame(url);
        });
    });
}

function openGame(url) {
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.openLink(url);
    } else {
        window.open(url, '_blank', 'noopener,noreferrer');
    }
}

// ==================== OTHER FUNCTIONS ====================

function setupNavigation() {
    const navItems = document.querySelectorAll('.nav-item');
    const sections = document.querySelectorAll('.content-section');
    
    navItems.forEach(item => {
        item.addEventListener('click', function() {
            const targetSection = this.getAttribute('data-section');
            
            navItems.forEach(nav => nav.classList.remove('active'));
            this.classList.add('active');
            
            sections.forEach(section => {
                section.classList.remove('active');
                if (section.id === targetSection) {
                    section.classList.add('active');
                }
            });
        });
    });
}

function setupTelegramIntegration() {
    if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        
        tg.expand();
        tg.enableClosingConfirmation();
        
        updateUserProfile(tg.initDataUnsafe.user);
        
        tg.ready();
    } else {
        console.log('Telegram WebApp not detected, running in browser mode');
        updateUserProfile({
            first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            username: 'user'
        });
    }
}

function updateUserProfile(user) {
    if (user) {
        const name = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const username = user.username ? `@${user.username}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        document.getElementById('tg-name').textContent = name;
        document.getElementById('tg-username').textContent = username;
        
        if (user.photo_url) {
            document.getElementById('tg-avatar').innerHTML = `<img src="${user.photo_url}" alt="${name}">`;
            document.getElementById('tg-avatar-large').innerHTML = `<img src="${user.photo_url}" alt="${name}">`;
        }
    }
}

function setupThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    const themeIcon = themeToggle.querySelector('.action-icon');
    const themeText = themeToggle.querySelector('.action-text');
    
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateThemeButton(savedTheme);
    
    themeToggle.addEventListener('click', function() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateThemeButton(newTheme);
    });
    
    function updateThemeButton(theme) {
        if (theme === 'dark') {
            themeIcon.textContent = '‚òÄÔ∏è';
            themeText.textContent = '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
        } else {
            themeIcon.textContent = 'üåô';
            themeText.textContent = '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞';
        }
    }
}

function setupShareButton() {
    const shareButton = document.getElementById('share-button');
    shareButton.addEventListener('click', shareApp);
}

function shareApp() {
    const shareText = "üéÆ –û—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è Hamster Verse - –≤—Å–µ –ª—É—á—à–∏–µ –∏–≥—Ä—ã Telegram –≤ –æ–¥–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!";
    const shareUrl = window.location.href;
    
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.shareUrl(shareUrl, shareText);
    } else if (navigator.share) {
        navigator.share({
            title: 'Hamster Verse',
            text: shareText,
            url: shareUrl
        });
    } else {
        navigator.clipboard.writeText(shareUrl).then(() => {
            alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä!');
        });
    }
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.handleImageError = handleImageError;
